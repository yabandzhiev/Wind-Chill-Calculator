{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","mphInput","setMphInput","airTemp","setAirTemp","result","setResult","className","cellPadding","cellSpacing","type","value","onChange","e","target","onClick","colSpan","preventDefault","chill","Math","pow","isNaN","document","getElementById","id","style","outline","cursor","readOnly","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAgGeA,MA7Ff,WAAuB,IAAD,EACYC,mBAAS,IADrB,mBACbC,EADa,KACHC,EADG,OAEUF,mBAAS,IAFnB,mBAEbG,EAFa,KAEJC,EAFI,OAGQJ,mBAAS,IAHjB,mBAGbK,EAHa,KAGLC,EAHK,KAiCpB,OACE,yBAAKC,UAAU,cACb,8BACE,gCACE,2BAAOA,UAAU,QAAQC,YAAY,IAAIC,YAAY,KACnD,+BACE,4BACE,kDACA,4BACE,2BACEC,KAAK,OACLC,MAAOV,EACPW,SAxCQ,SAACC,GACzB,OAAOX,EAAYW,EAAEC,OAAOH,QAwCZI,QAlCQ,SAACF,GACzB,OAAOX,EAAY,SAsCT,4BACE,yDACA,4BACE,2BACEQ,KAAK,OACLC,MAAOR,EACPS,SAjDQ,SAACC,GACzB,OAAOT,EAAWS,EAAEC,OAAOH,QAiDXI,QA3CQ,SAACF,GACzB,OAAOT,EAAW,UA+CV,+BACE,4BACE,wBAAIY,QAAQ,KACV,6BACA,2BACET,UAAU,eACVG,KAAK,SACLC,MAAM,uBACNI,QApDA,SAACF,GACjBA,EAAEI,iBACF,IAAIC,EACF,OACG,KAAOC,KAAKC,IAAInB,EAAU,IAAO,KAAO,IAAOA,IAC/CE,EAAU,MACb,KACF,OAAIkB,MAAMH,GACAI,SAASC,eAAe,UAAUZ,MAAQ,kBAE3CL,EAAUY,MA4CL,6BACA,6BACA,2BACEM,GAAG,SACHb,MAAON,EACPoB,MAAO,CAAEC,QAAS,OAAQC,OAAQ,QAClCjB,KAAK,OACLkB,UAAQ,IAfZ,gBCxDDC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASC,eAAe,SDyHpB,kBAAmBe,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a724c248.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/Calculator.css\";\r\n\r\nfunction Calculator() {\r\n  const [mphInput, setMphInput] = useState(\"\");\r\n  const [airTemp, setAirTemp] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n\r\n  const handleOnChangeMph = (e) => {\r\n    return setMphInput(e.target.value);\r\n  };\r\n  const handleOnChangeAir = (e) => {\r\n    return setAirTemp(e.target.value);\r\n  };\r\n\r\n  const handleOnClickWind = (e) => {\r\n    return setMphInput(\"\");\r\n  };\r\n  const handleOnClickTemp = (e) => {\r\n    return setAirTemp(\"\");\r\n  };\r\n\r\n  const windChill = (e) => {\r\n    e.preventDefault();\r\n    let chill =\r\n      0.0817 *\r\n        (3.71 * Math.pow(mphInput, 0.5) + 5.81 - 0.25 * mphInput) *\r\n        (airTemp - 91.4) +\r\n      91.4;\r\n    if (isNaN(chill)) {\r\n      return (document.getElementById(\"result\").value = \"Input not valid\");\r\n    } else {\r\n      return setResult(chill);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <form>\r\n        <center>\r\n          <table className=\"table\" cellPadding=\"3\" cellSpacing=\"0\">\r\n            <tbody>\r\n              <tr>\r\n                <td>Wind Speed (MPH) =</td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={mphInput}\r\n                    onChange={handleOnChangeMph}\r\n                    onClick={handleOnClickWind}\r\n                  />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Air Temperature (ºF) =</td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={airTemp}\r\n                    onChange={handleOnChangeAir}\r\n                    onClick={handleOnClickTemp}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n            <tfoot>\r\n              <tr>\r\n                <td colSpan=\"2\">\r\n                  <br />\r\n                  <input\r\n                    className=\"resultButton\"\r\n                    type=\"button\"\r\n                    value=\"Calculate Wind Chill\"\r\n                    onClick={windChill}\r\n                  />\r\n                  <br />\r\n                  <br />\r\n                  <input\r\n                    id=\"result\"\r\n                    value={result}\r\n                    style={{ outline: \"none\", cursor: \"auto\" }}\r\n                    type=\"text\"\r\n                    readOnly\r\n                  />\r\n                  ºF\r\n                </td>\r\n              </tr>\r\n            </tfoot>\r\n          </table>\r\n        </center>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}